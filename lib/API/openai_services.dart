import 'dart:convert';
//env
import 'package:flutter_dotenv/flutter_dotenv.dart';

//importing http for sending and receiving data over the internet
import 'package:http/http.dart' as http;
import 'package:kisan_mitra_app/API/secret.dart';

// Note: ADD OpenAIKey in a new file called Secrets.dart in the lib folder, create your own API Key from OpenAI

class OpenAIService {
  //List to store conversation history
  final List<Map<String, String>> messages = [];

  //Function to check if the prompt is an art prompt or not
  Future<String> isArtPromptApi(String prompt) async {
    try {
      print("Called");

      final url =
          Uri.parse("https://kisan-mitra-backend.onrender.com/${prompt}");
      print(url);

      final res = await http.get(
        url,
        headers: {
          'Authorization': 'Bearer $OpenAIKey',
          'Content-Type': 'application/json',
        },
      );
      var response = jsonDecode(res.body);
      return response['result']['output'];

      //Checking the response generated by CHATGPT
      // if (res.statusCode == 200) {
      //   //yes or no answer generated by CHATGPT
      //   String GPTreply =
      //       jsonDecode(res.body)['choices'][0]['message']['content'];
      //   //removing any additional spaces
      //   GPTreply = GPTreply.trim();

      //   // Testing all possible yes or no answers
      //   switch (GPTreply) {
      //     case 'Yes':
      //     case 'yes':
      //     case 'Yes.':
      //     case 'yes.':
      //       final res = await dallEApi(prompt);
      //       return res;
      //     default:
      //       final res = await chatGPTApi(prompt);
      //       return res;
      //   }
      // }
      // Message to be displayed when the statuscode is not 200 or
      //dallEApi() or chatGPTApi() fails
      return 'An Error Occured';
    } catch (e) {
      return e.toString();
    }
  }

  //Function to generate Text using CHATGPT
  Future<String> chatGPTApi(String prompt) async {
    //adding conversation detail in message
    messages.add({
      'role': 'user',
      'content': prompt,
    });

    try {
      //response of CHATGPT
      final res = await http.post(
          Uri.parse("https://api.openai.com/v1/chat/completions"),
          headers: {
            'Authorization': 'Bearer $OpenAIKey',
            'Content-Type': 'application/json',
          },
          body: jsonEncode({
            "model": "gpt-3.5-turbo",
            "messages": messages,
          }));

      //Checking the response generated by CHATGPT
      if (res.statusCode == 200) {
        //reply generated by CHATGPT
        String GPTreply =
            jsonDecode(res.body)['choices'][0]['message']['content'];

        //adding CHATGPT reply detail in message
        messages.add({
          'role': 'assistant',
          'content': GPTreply,
        });

        return GPTreply;
      }
      return 'An error occurred in the Conversation';
    } catch (e) {
      return e.toString();
    }
  }

  //Function to generate Image using DallE
  Future<String> dallEApi(String prompt) async {
    //adding conversation detail in message
    messages.add({
      'role': 'user',
      'content': prompt,
    });

    try {
      //response of CHATGPT
      final res = await http.post(
          Uri.parse("https://api.openai.com/v1/images/generations"),
          headers: {
            'Authorization': 'Bearer $OpenAIKey',
            'Content-Type': 'application/json',
          },
          body: jsonEncode({
            "prompt": prompt,
            "n": 1,
          }));

      //Checking the response generated by DallEreoly
      if (res.statusCode == 200) {
        //reply generated by CHATGPT
        String DallEreply = jsonDecode(res.body)['data'][0]['url'];

        //adding DallEreoly reply detail in message
        messages.add({
          'role': 'assistant',
          'content': DallEreply,
        });

        return DallEreply;
      }

      return 'An error occurred in the Conversation';
    } catch (e) {
      return e.toString();
    }
  }
}
